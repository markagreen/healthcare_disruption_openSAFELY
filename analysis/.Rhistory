write.csv(input_imd, file = gsub("analysis", "", here("output/measures","standardised_imd_trends.csv")))
# c. Age- and sex-standardise data by region #
# Aggregate by deprivation quntile, age and sex over time
input_region <- input_all[, list(admitted = sum(admitted, na.rm =T), admitted_acs_all = sum(admitted_acs_all, na.rm = T), admitted_acs_acute = sum(admitted_acs_acute, na.rm = T), admitted_acs_chronic = sum(admitted_acs_chronic, na.rm = T), admitted_acs_vaccine = sum(admitted_acs_vaccine, na.rm = T), admitted_eucs = sum(admitted_eucs, na.rm = T), pop = .N), by = c("age_group", "sex", "region", "date")]
# Join on standard population data
input_region <- merge(input_region, std_pop, by = c("age_group", "sex", "date"), all.x = TRUE) # Join expected rates onto the main dataset
# Calculate expected number of admissions (indirect method)
input_region$iexp_admitted <- input_region$pop * input_region$admitted_rate # Multiple expected rate by population size - repeat for all measures
input_region$iexp_admitted_acs_all <- input_region$pop * input_region$admitted_acs_all_rate
input_region$iexp_admitted_acs_acute <- input_region$pop * input_region$admitted_acs_acute_rate
input_region$iexp_admitted_acs_chronic <- input_region$pop * input_region$admitted_acs_chronic_rate
input_region$iexp_admitted_acs_vaccine <- input_region$pop * input_region$admitted_acs_vaccine_rate
input_region$iexp_admitted_eucs <- input_region$pop * input_region$admitted_eucs_rate
# Calculate expected number of admissions (direct method)
input_region$dexp_admitted <- (input_region$admitted / input_region$pop) * input_region$std_pop # Multiple observed rate by standard population - repeat for all measures
input_region$dexp_admitted_acs_all <- (input_region$admitted_acs_all / input_region$pop) * input_region$std_pop
input_region$dexp_admitted_acs_acute <- (input_region$admitted_acs_acute / input_region$pop) * input_region$std_pop
input_region$dexp_admitted_acs_chronic <- (input_region$admitted_acs_chronic / input_region$pop) * input_region$std_pop
input_region$dexp_admitted_acs_vaccine <- (input_region$admitted_acs_vaccine / input_region$pop) * input_region$std_pop
input_region$dexp_admitted_eucs <- (input_region$admitted_eucs / input_region$pop) * input_region$std_pop
# Sum data by age
input_region <- input_region[, list(admitted = sum(admitted, na.rm =T), iexp_admitted = sum(iexp_admitted , na.rm = T), dexp_admitted = sum(dexp_admitted , na.rm = T), admitted_acs_all = sum(admitted_acs_all, na.rm =T), iexp_admitted_acs_all = sum(iexp_admitted_acs_all , na.rm = T), dexp_admitted_acs_all = sum(dexp_admitted_acs_all , na.rm = T), admitted_acs_acute = sum(admitted_acs_acute, na.rm =T), iexp_admitted_acs_acute = sum(iexp_admitted_acs_acute , na.rm = T), dexp_admitted_acs_acute = sum(dexp_admitted_acs_acute , na.rm = T), admitted_acs_chronic = sum(admitted_acs_chronic, na.rm =T), iexp_admitted_acs_chronic = sum(iexp_admitted_acs_chronic , na.rm = T), dexp_admitted_acs_chronic = sum(dexp_admitted_acs_chronic , na.rm = T), admitted_acs_vaccine = sum(admitted_acs_vaccine, na.rm =T), iexp_admitted_acs_vaccine = sum(iexp_admitted_acs_vaccine , na.rm = T), dexp_admitted_acs_vaccine = sum(dexp_admitted_acs_vaccine , na.rm = T), admitted_eucs = sum(admitted_eucs, na.rm =T), iexp_admitted_eucs = sum(iexp_admitted_eucs , na.rm = T), dexp_admitted_eucs = sum(dexp_admitted_eucs , na.rm = T), pop = sum(pop, na.rm = T), std_pop = sum(std_pop, na.rm = T)), by = c("sex", "region", "date")]
# Drop small counts (i.e., <=5) so data can be released
input_region <- input_region[input_region$pop > 5] # Drop any rows where population is <= 5
input_region$admitted[input_region$admitted <= 5] <- NA # So if numnber of admitted is 0-5, then we replace the value as missing
input_region$iexp_admitted[is.na(input_region$admitted)] <- NA # Repeat for both expected counts as derived from above
input_region$dexp_admitted[is.na(input_region$admitted)] <- NA
input_region$admitted_acs_all[input_region$admitted_acs_all <= 5] <- NA # Now repeat process for each measure individually
input_region$iexp_admitted_acs_all[is.na(input_region$admitted_acs_all)] <- NA
input_region$dexp_admitted_acs_all[is.na(input_region$admitted_acs_all)] <- NA
input_region$admitted_acs_acute[input_region$admitted_acs_acute <= 5] <- NA
input_region$iexp_admitted_acs_acute[is.na(input_region$admitted_acs_all)] <- NA
input_region$dexp_admitted_acs_acute[is.na(input_region$admitted_acs_all)] <- NA
input_region$admitted_acs_chronic[input_region$admitted_acs_chronic <= 5] <- NA
input_region$iexp_admitted_acs_chronic[is.na(input_region$admitted_acs_chronic)] <- NA
input_region$dexp_admitted_acs_chronic[is.na(input_region$admitted_acs_chronic)] <- NA
input_region$admitted_acs_vaccine[input_region$admitted_acs_vaccine <= 5] <- NA
input_region$iexp_admitted_acs_vaccine[is.na(input_region$admitted_acs_vaccine)] <- NA
input_region$dexp_admitted_acs_vaccine[is.na(input_region$admitted_acs_vaccine)] <- NA
input_region$admitted_eucs[input_region$admitted_eucs <= 5] <- NA
input_region$iexp_admitted_eucs[is.na(input_region$admitted_eucs)] <- NA
input_region$dexp_admitted_eucs[is.na(input_region$admitted_eucs)] <- NA
# Save
write.csv(input_region, file = gsub("analysis", "", here("output/measures","standardised_region_trends.csv")))
# Aggregate by deprivation quntile, age and sex over time
input_urbrur <- input_all[, list(admitted = sum(admitted, na.rm =T), admitted_acs_all = sum(admitted_acs_all, na.rm = T), admitted_acs_acute = sum(admitted_acs_acute, na.rm = T), admitted_acs_chronic = sum(admitted_acs_chronic, na.rm = T), admitted_acs_vaccine = sum(admitted_acs_vaccine, na.rm = T), admitted_eucs = sum(admitted_eucs, na.rm = T), pop = .N), by = c("age_group", "sex", "urban_rural", "date")]
# Join on standard population data
input_urbrur <- merge(input_urbrur, std_pop, by = c("age_group", "sex", "date"), all.x = TRUE) # Join expected rates onto the main dataset
# Calculate expected number of admissions (indirect method)
input_urbrur$iexp_admitted <- input_urbrur$pop * input_urbrur$admitted_rate # Multiple expected rate by population size - repeat for all measures
input_urbrur$iexp_admitted_acs_all <- input_urbrur$pop * input_urbrur$admitted_acs_all_rate
input_urbrur$iexp_admitted_acs_acute <- input_urbrur$pop * input_urbrur$admitted_acs_acute_rate
input_urbrur$iexp_admitted_acs_chronic <- input_urbrur$pop * input_urbrur$admitted_acs_chronic_rate
input_urbrur$iexp_admitted_acs_vaccine <- input_urbrur$pop * input_urbrur$admitted_acs_vaccine_rate
input_urbrur$iexp_admitted_eucs <- input_urbrur$pop * input_urbrur$admitted_eucs_rate
# Calculate expected number of admissions (direct method)
input_urbrur$dexp_admitted <- (input_urbrur$admitted / input_urbrur$pop) * input_urbrur$std_pop # Multiple observed rate by standard population - repeat for all measures
input_urbrur$dexp_admitted_acs_all <- (input_urbrur$admitted_acs_all / input_urbrur$pop) * input_urbrur$std_pop
input_urbrur$dexp_admitted_acs_acute <- (input_urbrur$admitted_acs_acute / input_urbrur$pop) * input_urbrur$std_pop
input_urbrur$dexp_admitted_acs_chronic <- (input_urbrur$admitted_acs_chronic / input_urbrur$pop) * input_urbrur$std_pop
input_urbrur$dexp_admitted_acs_vaccine <- (input_urbrur$admitted_acs_vaccine / input_urbrur$pop) * input_urbrur$std_pop
input_urbrur$dexp_admitted_eucs <- (input_urbrur$admitted_eucs / input_urbrur$pop) * input_urbrur$std_pop
# Sum data by age
input_urbrur <- input_urbrur[, list(admitted = sum(admitted, na.rm =T), iexp_admitted = sum(iexp_admitted , na.rm = T), dexp_admitted = sum(dexp_admitted , na.rm = T), admitted_acs_all = sum(admitted_acs_all, na.rm =T), iexp_admitted_acs_all = sum(iexp_admitted_acs_all , na.rm = T), dexp_admitted_acs_all = sum(dexp_admitted_acs_all , na.rm = T), admitted_acs_acute = sum(admitted_acs_acute, na.rm =T), iexp_admitted_acs_acute = sum(iexp_admitted_acs_acute , na.rm = T), dexp_admitted_acs_acute = sum(dexp_admitted_acs_acute , na.rm = T), admitted_acs_chronic = sum(admitted_acs_chronic, na.rm =T), iexp_admitted_acs_chronic = sum(iexp_admitted_acs_chronic , na.rm = T), dexp_admitted_acs_chronic = sum(dexp_admitted_acs_chronic , na.rm = T), admitted_acs_vaccine = sum(admitted_acs_vaccine, na.rm =T), iexp_admitted_acs_vaccine = sum(iexp_admitted_acs_vaccine , na.rm = T), dexp_admitted_acs_vaccine = sum(dexp_admitted_acs_vaccine , na.rm = T), admitted_eucs = sum(admitted_eucs, na.rm =T), iexp_admitted_eucs = sum(iexp_admitted_eucs , na.rm = T), dexp_admitted_eucs = sum(dexp_admitted_eucs , na.rm = T), pop = sum(pop, na.rm = T), std_pop = sum(std_pop, na.rm = T)), by = c("sex", "urban_rural", "date")]
# Drop small counts (i.e., <=5) so data can be released
input_urbrur <- input_urbrur[input_urbrur$pop > 5] # Drop any rows where population is <= 5
input_urbrur$admitted[input_urbrur$admitted <= 5] <- NA # So if numnber of admitted is 0-5, then we replace the value as missing
input_urbrur$iexp_admitted[is.na(input_urbrur$admitted)] <- NA # Repeat for both expected counts as derived from above
input_urbrur$dexp_admitted[is.na(input_urbrur$admitted)] <- NA
input_urbrur$admitted_acs_all[input_urbrur$admitted_acs_all <= 5] <- NA # Now repeat process for each measure individually
input_urbrur$iexp_admitted_acs_all[is.na(input_urbrur$admitted_acs_all)] <- NA
input_urbrur$dexp_admitted_acs_all[is.na(input_urbrur$admitted_acs_all)] <- NA
input_urbrur$admitted_acs_acute[input_urbrur$admitted_acs_acute <= 5] <- NA
input_urbrur$iexp_admitted_acs_acute[is.na(input_urbrur$admitted_acs_all)] <- NA
input_urbrur$dexp_admitted_acs_acute[is.na(input_urbrur$admitted_acs_all)] <- NA
input_urbrur$admitted_acs_chronic[input_urbrur$admitted_acs_chronic <= 5] <- NA
input_urbrur$iexp_admitted_acs_chronic[is.na(input_urbrur$admitted_acs_chronic)] <- NA
input_urbrur$dexp_admitted_acs_chronic[is.na(input_urbrur$admitted_acs_chronic)] <- NA
input_urbrur$admitted_acs_vaccine[input_urbrur$admitted_acs_vaccine <= 5] <- NA
input_urbrur$iexp_admitted_acs_vaccine[is.na(input_urbrur$admitted_acs_vaccine)] <- NA
input_urbrur$dexp_admitted_acs_vaccine[is.na(input_urbrur$admitted_acs_vaccine)] <- NA
input_urbrur$admitted_eucs[input_urbrur$admitted_eucs <= 5] <- NA
input_urbrur$iexp_admitted_eucs[is.na(input_urbrur$admitted_eucs)] <- NA
input_urbrur$dexp_admitted_eucs[is.na(input_urbrur$admitted_eucs)] <- NA
# Save
write.csv(input_urbrur, file = gsub("analysis", "", here("output/measures","standardised_urbrur_trends.csv")))
## 4. Tidy ##
rm(list = ls())
gc()
# Load libraries
library(data.table)
library(readr)
library(here)
# Load data (individually at a time - suggestions for more efficient code welcome!)
input_19_1 <- read_csv(gsub("analysis", "", here("output/measures","input_2019-01-01.csv.gz"))) # Load
input_19_1$date <- "2019-01-01" # Add date
date <- "2019-01-01" # Add date
input_19_1 <- read_csv(gsub("analysis", "", here("output/measures", date))) # Load
input_19_1 <- read_csv(gsub("analysis", "", here("output/measures"), date)) # Load
input_19_1 <- read_csv(gsub("analysis", "", here("output/measures"), "/", paste0(date))) # Load
input_19_1 <- read_csv(gsub("analysis", "", here("output/measures"), "/", paste(date))) # Load
paste(date)
input_19_1 <- read_csv(gsub("analysis", "", here("output/measures"), "/input_", paste(date), ".csv.gz")) # Load
gsub("analysis", "", here("output/measures"), "/input_", paste(date), ".csv.gz")
gsub(gsub("analysis", "", here("output/measures")), "/input_", paste(date), ".csv.gz")
?gsub
paste(gsub(gsub("analysis", "", here("output/measures")), "/input_", paste(date), ".csv.gz"))
paste(gsub("analysis", "", here("output/measures")), "/input_", paste(date), ".csv.gz"))
paste(gsub("analysis", "", here("output/measures")), "/input_", paste(date), ".csv.gz")
paste(gsub("analysis", "", here("output/measures")))
input_19_1 <- read_csv(gsub("analysis", "", here("output/measures","input_2019-01-01.csv.gz"))) # Load
head(input_19_1)
# Load data (individually at a time - suggestions for more efficient code welcome!)
input <- read_csv(gsub("analysis", "", here("output/measures","input_2019-01-01.csv.gz"))) # Load
input$date <- "2019-01-01" # Add date
rm(input_19_1)
std_pop <- input[, list(admitted = sum(admitted, na.rm =T), admitted_acs_all = sum(admitted_acs_all, na.rm = T), admitted_acs_acute = sum(admitted_acs_acute, na.rm = T), admitted_acs_chronic = sum(admitted_acs_chronic, na.rm = T), admitted_acs_vaccine = sum(admitted_acs_vaccine, na.rm = T), admitted_eucs = sum(admitted_eucs, na.rm = T), std_pop = .N), by = c("age_group", "sex", "date")] # Aggregate data by age group, sex and date
std_pop$admitted_rate <- std_pop$admitted / std_pop$std_pop # Calculate rate for admissions overall
std_pop$admitted_acs_all_rate <- std_pop$admitted_acs_all / std_pop$std_pop # Repeat rate calculation but by measure of avoidable hospitalisation
std_pop$admitted_acs_acute_rate <- std_pop$admitted_acs_acute / std_pop$std_pop
std_pop$admitted_acs_chronic_rate <- std_pop$admitted_acs_chronic / std_pop$std_pop
std_pop$admitted_acs_vaccine_rate <- std_pop$admitted_acs_vaccine / std_pop$std_pop
std_pop$admitted_eucs_rate <- std_pop$admitted_eucs / std_pop$std_pop
std_pop <- std_pop[, c("age_group", "sex", "date", "std_pop", "admitted_rate", "admitted_acs_all_rate", "admitted_acs_acute_rate", "admitted_acs_chronic_rate", "admitted_acs_vaccine_rate", "admitted_eucs_rate")] # Keep required variables
head(input)
# Convert to data.table format as I think the library is ace, sorry not sorry
input <- data.table(input)
# Calculate age group
input[, age_group:=cut(age, breaks = c(0,9,19,29,39,49,59,69,79,120), include.lowest=T)] # Define age groups
input[age_group=="[0,9]", age_group:="0-9"] # Rename labels (plus below lines)
input[age_group=="(9,19]", age_group:="10-19"]
input[age_group=="(19,29]", age_group:="20-29"]
input[age_group=="(29,39]", age_group:="30-39"]
input[age_group=="(39,49]", age_group:="40-49"]
input[age_group=="(49,59]", age_group:="50-59"]
input[age_group=="(59,69]", age_group:="60-69"]
input[age_group=="(69,79]", age_group:="70-79"]
input[age_group=="(79,120]", age_group:="80+"]
std_pop <- input[, list(admitted = sum(admitted, na.rm =T), admitted_acs_all = sum(admitted_acs_all, na.rm = T), admitted_acs_acute = sum(admitted_acs_acute, na.rm = T), admitted_acs_chronic = sum(admitted_acs_chronic, na.rm = T), admitted_acs_vaccine = sum(admitted_acs_vaccine, na.rm = T), admitted_eucs = sum(admitted_eucs, na.rm = T), std_pop = .N), by = c("age_group", "sex", "date")] # Aggregate data by age group, sex and date
std_pop$admitted_rate <- std_pop$admitted / std_pop$std_pop # Calculate rate for admissions overall
std_pop$admitted_acs_all_rate <- std_pop$admitted_acs_all / std_pop$std_pop # Repeat rate calculation but by measure of avoidable hospitalisation
std_pop$admitted_acs_acute_rate <- std_pop$admitted_acs_acute / std_pop$std_pop
std_pop$admitted_acs_chronic_rate <- std_pop$admitted_acs_chronic / std_pop$std_pop
std_pop$admitted_acs_vaccine_rate <- std_pop$admitted_acs_vaccine / std_pop$std_pop
std_pop$admitted_eucs_rate <- std_pop$admitted_eucs / std_pop$std_pop
std_pop <- std_pop[, c("age_group", "sex", "date", "std_pop", "admitted_rate", "admitted_acs_all_rate", "admitted_acs_acute_rate", "admitted_acs_chronic_rate", "admitted_acs_vaccine_rate", "admitted_eucs_rate")] # Keep required variables
# Aggregate by deprivation quntile, age and sex over time
input_imd <- input[, list(admitted = sum(admitted, na.rm =T), admitted_acs_all = sum(admitted_acs_all, na.rm = T), admitted_acs_acute = sum(admitted_acs_acute, na.rm = T), admitted_acs_chronic = sum(admitted_acs_chronic, na.rm = T), admitted_acs_vaccine = sum(admitted_acs_vaccine, na.rm = T), admitted_eucs = sum(admitted_eucs, na.rm = T), pop = .N), by = c("age_group", "sex", "imd_quintile", "date")]
# Join on standard population data
input_imd <- merge(input_imd, std_pop, by = c("age_group", "sex", "date"), all.x = TRUE) # Join expected rates onto the main dataset
# Calculate expected number of admissions (indirect method)
input_imd$iexp_admitted <- input_imd$pop * input_imd$admitted_rate # Multiple expected rate by population size - repeat for all measures
input_imd$iexp_admitted_acs_all <- input_imd$pop * input_imd$admitted_acs_all_rate
input_imd$iexp_admitted_acs_acute <- input_imd$pop * input_imd$admitted_acs_acute_rate
input_imd$iexp_admitted_acs_chronic <- input_imd$pop * input_imd$admitted_acs_chronic_rate
input_imd$iexp_admitted_acs_vaccine <- input_imd$pop * input_imd$admitted_acs_vaccine_rate
input_imd$iexp_admitted_eucs <- input_imd$pop * input_imd$admitted_eucs_rate
# Calculate expected number of admissions (direct method)
input_imd$dexp_admitted <- (input_imd$admitted / input_imd$pop) * input_imd$std_pop # Multiple observed rate by standard population - repeat for all measures
input_imd$dexp_admitted_acs_all <- (input_imd$admitted_acs_all / input_imd$pop) * input_imd$std_pop
input_imd$dexp_admitted_acs_acute <- (input_imd$admitted_acs_acute / input_imd$pop) * input_imd$std_pop
input_imd$dexp_admitted_acs_chronic <- (input_imd$admitted_acs_chronic / input_imd$pop) * input_imd$std_pop
input_imd$dexp_admitted_acs_vaccine <- (input_imd$admitted_acs_vaccine / input_imd$pop) * input_imd$std_pop
input_imd$dexp_admitted_eucs <- (input_imd$admitted_eucs / input_imd$pop) * input_imd$std_pop
# Sum data by age
input_imd <- input_imd[, list(admitted = sum(admitted, na.rm =T), iexp_admitted = sum(iexp_admitted , na.rm = T), dexp_admitted = sum(dexp_admitted , na.rm = T), admitted_acs_all = sum(admitted_acs_all, na.rm =T), iexp_admitted_acs_all = sum(iexp_admitted_acs_all , na.rm = T), dexp_admitted_acs_all = sum(dexp_admitted_acs_all , na.rm = T), admitted_acs_acute = sum(admitted_acs_acute, na.rm =T), iexp_admitted_acs_acute = sum(iexp_admitted_acs_acute , na.rm = T), dexp_admitted_acs_acute = sum(dexp_admitted_acs_acute , na.rm = T), admitted_acs_chronic = sum(admitted_acs_chronic, na.rm =T), iexp_admitted_acs_chronic = sum(iexp_admitted_acs_chronic , na.rm = T), dexp_admitted_acs_chronic = sum(dexp_admitted_acs_chronic , na.rm = T), admitted_acs_vaccine = sum(admitted_acs_vaccine, na.rm =T), iexp_admitted_acs_vaccine = sum(iexp_admitted_acs_vaccine , na.rm = T), dexp_admitted_acs_vaccine = sum(dexp_admitted_acs_vaccine , na.rm = T), admitted_eucs = sum(admitted_eucs, na.rm =T), iexp_admitted_eucs = sum(iexp_admitted_eucs , na.rm = T), dexp_admitted_eucs = sum(dexp_admitted_eucs , na.rm = T), pop = sum(pop, na.rm = T), std_pop = sum(std_pop, na.rm = T)), by = c("sex", "imd_quintile", "date")]
head(input_imd)
names(input_imd)
?double
# Load libraries
library(data.table)
library(readr)
library(here)
## 1. Load all data into R and tidy ##
# The code does this individually one month at a time - suggestions for more efficient code welcome!)
# January 2019
input <- read_csv(gsub("analysis", "", here("output/measures","input_2019-01-01.csv.gz"))) # Load
input$date <- "2019-01-01" # Add date
source(age_standardise_month.R) # Call age-standardisation script
source("age_standardise_month.R") # Call age-standardisation script
output_imd <- input_imd # Resave object in what we will output (do for each)
output_region <- input_region
output_urbrur <- input_urbrur
rm(input_imd, input_region, input_urbrur) # Tidy
# February 2019
input <- read_csv(gsub("analysis", "", here("output/measures","input_2019-02-01.csv.gz"))) # Load
input$date <- "2019-02-01" # Add date
source("age_standardise_month.R") # Call age-standardisation script
output_imd <- rbind(output_imd, input_imd) # Add month records to output file (for each)
output_region <- rbind(output_region, input_region)
output_urbrur <- rbind(output_urbrur, input_urbrur)
rm(input_imd, input_region, input_urbrur) # Tidy
# March 2019
input <- read_csv(gsub("analysis", "", here("output/measures","input_2019-03-01.csv.gz"))) # Load
input$date <- "2019-03-01" # Add date
source("age_standardise_month.R") # Call age-standardisation script
output_imd <- rbind(output_imd, input_imd) # Add month records to output file (for each)
output_region <- rbind(output_region, input_region)
output_urbrur <- rbind(output_urbrur, input_urbrur)
rm(input_imd, input_region, input_urbrur) # Tidy
# April 2019
input <- read_csv(gsub("analysis", "", here("output/measures","input_2019-04-01.csv.gz"))) # Load
input$date <- "2019-04-01" # Add date
source("age_standardise_month.R") # Call age-standardisation script
output_imd <- rbind(output_imd, input_imd) # Add month records to output file (for each)
output_region <- rbind(output_region, input_region)
output_urbrur <- rbind(output_urbrur, input_urbrur)
rm(input_imd, input_region, input_urbrur) # Tidy
# May 2019
input <- read_csv(gsub("analysis", "", here("output/measures","input_2019-05-01.csv.gz"))) # Load
input$date <- "2019-05-01" # Add date
source("age_standardise_month.R") # Call age-standardisation script
output_imd <- rbind(output_imd, input_imd) # Add month records to output file (for each)
output_region <- rbind(output_region, input_region)
output_urbrur <- rbind(output_urbrur, input_urbrur)
rm(input_imd, input_region, input_urbrur) # Tidy
# June 2019
input <- read_csv(gsub("analysis", "", here("output/measures","input_2019-06-01.csv.gz"))) # Load
input$date <- "2019-06-01" # Add date
source("age_standardise_month.R") # Call age-standardisation script
output_imd <- rbind(output_imd, input_imd) # Add month records to output file (for each)
output_region <- rbind(output_region, input_region)
output_urbrur <- rbind(output_urbrur, input_urbrur)
rm(input_imd, input_region, input_urbrur) # Tidy
# July 2019
input <- read_csv(gsub("analysis", "", here("output/measures","input_2019-07-01.csv.gz"))) # Load
input$date <- "2019-07-01" # Add date
source("age_standardise_month.R") # Call age-standardisation script
output_imd <- rbind(output_imd, input_imd) # Add month records to output file (for each)
output_region <- rbind(output_region, input_region)
output_urbrur <- rbind(output_urbrur, input_urbrur)
rm(input_imd, input_region, input_urbrur) # Tidy
# August 2019
input <- read_csv(gsub("analysis", "", here("output/measures","input_2019-08-01.csv.gz"))) # Load
input$date <- "2019-08-01" # Add date
source("age_standardise_month.R") # Call age-standardisation script
output_imd <- rbind(output_imd, input_imd) # Add month records to output file (for each)
output_region <- rbind(output_region, input_region)
output_urbrur <- rbind(output_urbrur, input_urbrur)
rm(input_imd, input_region, input_urbrur) # Tidy
# September 2019
input <- read_csv(gsub("analysis", "", here("output/measures","input_2019-09-01.csv.gz"))) # Load
input$date <- "2019-09-01" # Add date
source("age_standardise_month.R") # Call age-standardisation script
output_imd <- rbind(output_imd, input_imd) # Add month records to output file (for each)
output_region <- rbind(output_region, input_region)
output_urbrur <- rbind(output_urbrur, input_urbrur)
rm(input_imd, input_region, input_urbrur) # Tidy
# October 2019
input <- read_csv(gsub("analysis", "", here("output/measures","input_2019-10-01.csv.gz"))) # Load
input$date <- "2019-10-01" # Add date
source("age_standardise_month.R") # Call age-standardisation script
output_imd <- rbind(output_imd, input_imd) # Add month records to output file (for each)
output_region <- rbind(output_region, input_region)
output_urbrur <- rbind(output_urbrur, input_urbrur)
rm(input_imd, input_region, input_urbrur) # Tidy
# November 2019
input <- read_csv(gsub("analysis", "", here("output/measures","input_2019-11-01.csv.gz"))) # Load
input$date <- "2019-11-01" # Add date
source("age_standardise_month.R") # Call age-standardisation script
output_imd <- rbind(output_imd, input_imd) # Add month records to output file (for each)
output_region <- rbind(output_region, input_region)
output_urbrur <- rbind(output_urbrur, input_urbrur)
rm(input_imd, input_region, input_urbrur) # Tidy
# December 2019
input <- read_csv(gsub("analysis", "", here("output/measures","input_2019-12-01.csv.gz"))) # Load
input$date <- "2019-12-01" # Add date
source("age_standardise_month.R") # Call age-standardisation script
output_imd <- rbind(output_imd, input_imd) # Add month records to output file (for each)
output_region <- rbind(output_region, input_region)
output_urbrur <- rbind(output_urbrur, input_urbrur)
rm(input_imd, input_region, input_urbrur) # Tidy
# January 2020
input <- read_csv(gsub("analysis", "", here("output/measures","input_2020-01-01.csv.gz"))) # Load
input$date <- "2020-01-01" # Add date
source("age_standardise_month.R") # Call age-standardisation script
output_imd <- rbind(output_imd, input_imd) # Add month records to output file (for each)
output_region <- rbind(output_region, input_region)
output_urbrur <- rbind(output_urbrur, input_urbrur)
rm(input_imd, input_region, input_urbrur) # Tidy
# February 2020
input <- read_csv(gsub("analysis", "", here("output/measures","input_2020-02-01.csv.gz"))) # Load
input$date <- "2020-02-01" # Add date
source("age_standardise_month.R") # Call age-standardisation script
output_imd <- rbind(output_imd, input_imd) # Add month records to output file (for each)
output_region <- rbind(output_region, input_region)
output_urbrur <- rbind(output_urbrur, input_urbrur)
rm(input_imd, input_region, input_urbrur) # Tidy
# March 2020
input <- read_csv(gsub("analysis", "", here("output/measures","input_2020-03-01.csv.gz"))) # Load
input$date <- "2020-03-01" # Add date
source("age_standardise_month.R") # Call age-standardisation script
output_imd <- rbind(output_imd, input_imd) # Add month records to output file (for each)
output_region <- rbind(output_region, input_region)
output_urbrur <- rbind(output_urbrur, input_urbrur)
rm(input_imd, input_region, input_urbrur) # Tidy
# April 2020
input <- read_csv(gsub("analysis", "", here("output/measures","input_2020-04-01.csv.gz"))) # Load
input$date <- "2020-04-01" # Add date
source("age_standardise_month.R") # Call age-standardisation script
output_imd <- rbind(output_imd, input_imd) # Add month records to output file (for each)
output_region <- rbind(output_region, input_region)
output_urbrur <- rbind(output_urbrur, input_urbrur)
rm(input_imd, input_region, input_urbrur) # Tidy
# May 2020
input <- read_csv(gsub("analysis", "", here("output/measures","input_2020-05-01.csv.gz"))) # Load
input$date <- "2020-05-01" # Add date
source("age_standardise_month.R") # Call age-standardisation script
output_imd <- rbind(output_imd, input_imd) # Add month records to output file (for each)
output_region <- rbind(output_region, input_region)
output_urbrur <- rbind(output_urbrur, input_urbrur)
rm(input_imd, input_region, input_urbrur) # Tidy
# June 2020
input <- read_csv(gsub("analysis", "", here("output/measures","input_2020-06-01.csv.gz"))) # Load
input$date <- "2020-06-01" # Add date
source("age_standardise_month.R") # Call age-standardisation script
output_imd <- rbind(output_imd, input_imd) # Add month records to output file (for each)
output_region <- rbind(output_region, input_region)
output_urbrur <- rbind(output_urbrur, input_urbrur)
rm(input_imd, input_region, input_urbrur) # Tidy
# July 2020
input <- read_csv(gsub("analysis", "", here("output/measures","input_2020-07-01.csv.gz"))) # Load
input$date <- "2020-07-01" # Add date
source("age_standardise_month.R") # Call age-standardisation script
output_imd <- rbind(output_imd, input_imd) # Add month records to output file (for each)
output_region <- rbind(output_region, input_region)
output_urbrur <- rbind(output_urbrur, input_urbrur)
rm(input_imd, input_region, input_urbrur) # Tidy
# August 2020
input <- read_csv(gsub("analysis", "", here("output/measures","input_2020-08-01.csv.gz"))) # Load
input$date <- "2020-08-01" # Add date
source("age_standardise_month.R") # Call age-standardisation script
output_imd <- rbind(output_imd, input_imd) # Add month records to output file (for each)
output_region <- rbind(output_region, input_region)
output_urbrur <- rbind(output_urbrur, input_urbrur)
rm(input_imd, input_region, input_urbrur) # Tidy
# September 2020
input <- read_csv(gsub("analysis", "", here("output/measures","input_2020-09-01.csv.gz"))) # Load
input$date <- "2020-09-01" # Add date
source("age_standardise_month.R") # Call age-standardisation script
output_imd <- rbind(output_imd, input_imd) # Add month records to output file (for each)
output_region <- rbind(output_region, input_region)
output_urbrur <- rbind(output_urbrur, input_urbrur)
rm(input_imd, input_region, input_urbrur) # Tidy
# October 2020
input <- read_csv(gsub("analysis", "", here("output/measures","input_2020-10-01.csv.gz"))) # Load
input$date <- "2020-10-01" # Add date
source("age_standardise_month.R") # Call age-standardisation script
output_imd <- rbind(output_imd, input_imd) # Add month records to output file (for each)
output_region <- rbind(output_region, input_region)
output_urbrur <- rbind(output_urbrur, input_urbrur)
rm(input_imd, input_region, input_urbrur) # Tidy
# November 2020
input <- read_csv(gsub("analysis", "", here("output/measures","input_2020-11-01.csv.gz"))) # Load
input$date <- "2020-11-01" # Add date
source("age_standardise_month.R") # Call age-standardisation script
output_imd <- rbind(output_imd, input_imd) # Add month records to output file (for each)
output_region <- rbind(output_region, input_region)
output_urbrur <- rbind(output_urbrur, input_urbrur)
rm(input_imd, input_region, input_urbrur) # Tidy
# December 2020
input <- read_csv(gsub("analysis", "", here("output/measures","input_2020-12-01.csv.gz"))) # Load
input$date <- "2020-12-01" # Add date
source("age_standardise_month.R") # Call age-standardisation script
output_imd <- rbind(output_imd, input_imd) # Add month records to output file (for each)
output_region <- rbind(output_region, input_region)
output_urbrur <- rbind(output_urbrur, input_urbrur)
rm(input_imd, input_region, input_urbrur) # Tidy
# January 2021
input <- read_csv(gsub("analysis", "", here("output/measures","input_2021-01-01.csv.gz"))) # Load
input$date <- "2021-01-01" # Add date
source("age_standardise_month.R") # Call age-standardisation script
output_imd <- rbind(output_imd, input_imd) # Add month records to output file (for each)
output_region <- rbind(output_region, input_region)
output_urbrur <- rbind(output_urbrur, input_urbrur)
rm(input_imd, input_region, input_urbrur) # Tidy
# February 2021
input <- read_csv(gsub("analysis", "", here("output/measures","input_2021-02-01.csv.gz"))) # Load
input$date <- "2021-02-01" # Add date
source("age_standardise_month.R") # Call age-standardisation script
output_imd <- rbind(output_imd, input_imd) # Add month records to output file (for each)
output_region <- rbind(output_region, input_region)
output_urbrur <- rbind(output_urbrur, input_urbrur)
rm(input_imd, input_region, input_urbrur) # Tidy
# March 2021
input <- read_csv(gsub("analysis", "", here("output/measures","input_2021-03-01.csv.gz"))) # Load
input$date <- "2021-03-01" # Add date
source("age_standardise_month.R") # Call age-standardisation script
output_imd <- rbind(output_imd, input_imd) # Add month records to output file (for each)
output_region <- rbind(output_region, input_region)
output_urbrur <- rbind(output_urbrur, input_urbrur)
rm(input_imd, input_region, input_urbrur) # Tidy
# April 2021
input <- read_csv(gsub("analysis", "", here("output/measures","input_2021-04-01.csv.gz"))) # Load
input$date <- "2021-04-01" # Add date
source("age_standardise_month.R") # Call age-standardisation script
output_imd <- rbind(output_imd, input_imd) # Add month records to output file (for each)
output_region <- rbind(output_region, input_region)
output_urbrur <- rbind(output_urbrur, input_urbrur)
rm(input_imd, input_region, input_urbrur) # Tidy
# May 2021
input <- read_csv(gsub("analysis", "", here("output/measures","input_2021-05-01.csv.gz"))) # Load
input$date <- "2021-05-01" # Add date
source("age_standardise_month.R") # Call age-standardisation script
output_imd <- rbind(output_imd, input_imd) # Add month records to output file (for each)
output_region <- rbind(output_region, input_region)
output_urbrur <- rbind(output_urbrur, input_urbrur)
rm(input_imd, input_region, input_urbrur) # Tidy
# June 2021
input <- read_csv(gsub("analysis", "", here("output/measures","input_2021-06-01.csv.gz"))) # Load
input$date <- "2021-06-01" # Add date
source("age_standardise_month.R") # Call age-standardisation script
output_imd <- rbind(output_imd, input_imd) # Add month records to output file (for each)
output_region <- rbind(output_region, input_region)
output_urbrur <- rbind(output_urbrur, input_urbrur)
rm(input_imd, input_region, input_urbrur) # Tidy
# July 2021
input <- read_csv(gsub("analysis", "", here("output/measures","input_2021-07-01.csv.gz"))) # Load
input$date <- "2021-07-01" # Add date
source("age_standardise_month.R") # Call age-standardisation script
output_imd <- rbind(output_imd, input_imd) # Add month records to output file (for each)
output_region <- rbind(output_region, input_region)
output_urbrur <- rbind(output_urbrur, input_urbrur)
rm(input_imd, input_region, input_urbrur) # Tidy
# August 2021
input <- read_csv(gsub("analysis", "", here("output/measures","input_2021-08-01.csv.gz"))) # Load
input$date <- "2021-08-01" # Add date
source("age_standardise_month.R") # Call age-standardisation script
output_imd <- rbind(output_imd, input_imd) # Add month records to output file (for each)
output_region <- rbind(output_region, input_region)
output_urbrur <- rbind(output_urbrur, input_urbrur)
rm(input_imd, input_region, input_urbrur) # Tidy
# September 2021
input <- read_csv(gsub("analysis", "", here("output/measures","input_2021-09-01.csv.gz"))) # Load
input$date <- "2021-09-01" # Add date
source("age_standardise_month.R") # Call age-standardisation script
output_imd <- rbind(output_imd, input_imd) # Add month records to output file (for each)
output_region <- rbind(output_region, input_region)
output_urbrur <- rbind(output_urbrur, input_urbrur)
rm(input_imd, input_region, input_urbrur) # Tidy
# October 2021
input <- read_csv(gsub("analysis", "", here("output/measures","input_2021-10-01.csv.gz"))) # Load
input$date <- "2021-10-01" # Add date
source("age_standardise_month.R") # Call age-standardisation script
output_imd <- rbind(output_imd, input_imd) # Add month records to output file (for each)
output_region <- rbind(output_region, input_region)
output_urbrur <- rbind(output_urbrur, input_urbrur)
rm(input_imd, input_region, input_urbrur) # Tidy
# November 2021
input <- read_csv(gsub("analysis", "", here("output/measures","input_2021-11-01.csv.gz"))) # Load
input$date <- "2021-11-01" # Add date
source("age_standardise_month.R") # Call age-standardisation script
output_imd <- rbind(output_imd, input_imd) # Add month records to output file (for each)
output_region <- rbind(output_region, input_region)
output_urbrur <- rbind(output_urbrur, input_urbrur)
rm(input_imd, input_region, input_urbrur) # Tidy
# December 2021
input <- read_csv(gsub("analysis", "", here("output/measures","input_2021-12-01.csv.gz"))) # Load
input$date <- "2021-12-01" # Add date
source("age_standardise_month.R") # Call age-standardisation script
output_imd <- rbind(output_imd, input_imd) # Add month records to output file (for each)
output_region <- rbind(output_region, input_region)
output_urbrur <- rbind(output_urbrur, input_urbrur)
rm(input_imd, input_region, input_urbrur) # Tidy
# January 2022
input <- read_csv(gsub("analysis", "", here("output/measures","input_2022-01-01.csv.gz"))) # Load
input$date <- "2022-01-01" # Add date
source("age_standardise_month.R") # Call age-standardisation script
output_imd <- rbind(output_imd, input_imd) # Add month records to output file (for each)
output_region <- rbind(output_region, input_region)
output_urbrur <- rbind(output_urbrur, input_urbrur)
rm(input_imd, input_region, input_urbrur) # Tidy
# February 2022
input <- read_csv(gsub("analysis", "", here("output/measures","input_2022-02-01.csv.gz"))) # Load
input$date <- "2022-02-01" # Add date
source("age_standardise_month.R") # Call age-standardisation script
output_imd <- rbind(output_imd, input_imd) # Add month records to output file (for each)
output_region <- rbind(output_region, input_region)
output_urbrur <- rbind(output_urbrur, input_urbrur)
rm(input_imd, input_region, input_urbrur) # Tidy
# March 2022
input <- read_csv(gsub("analysis", "", here("output/measures","input_2022-03-01.csv.gz"))) # Load
input$date <- "2022-03-01" # Add date
source("age_standardise_month.R") # Call age-standardisation script
output_imd <- rbind(output_imd, input_imd) # Add month records to output file (for each)
output_region <- rbind(output_region, input_region)
output_urbrur <- rbind(output_urbrur, input_urbrur)
rm(input_imd, input_region, input_urbrur) # Tidy
summary(output_imd)
write.csv(input_imd, file = gsub("analysis", "", here("output/measures","standardised_imd_trends.csv")))
write.csv(output_imd, file = gsub("analysis", "", here("output/measures","standardised_imd_trends.csv")))
write.csv(output_region, file = gsub("analysis", "", here("output/measures","standardised_region_trends.csv")))
write.csv(output_urbrur, file = gsub("analysis", "", here("output/measures","standardised_urbrur_trends.csv")))
# Load libraries
library(data.table)
library(readr)
library(here)
## 1. Load all data into R and tidy ##
# The code does this individually one month at a time - suggestions for more efficient code welcome!)
# January 2019
input <- read_csv(gsub("analysis", "", here("output/measures","input_2019-01-01.csv.gz"))) # Load
input$date <- "2019-01-01" # Add date
source(here("age_standardise_month.R")) # Call age-standardisation script
here("age_standardise_month.R")
source(here("/analysis/age_standardise_month.R")) # Call age-standardisation script
library(here)
source(here("/analysis/age_standardise_month.R")) # Call age-standardisation script
here("/analysis/age_standardise_month.R")
here("age_standardise_month.R")
here("analysis", "age_standardise_month.R")
source(here("analysis", "age_standardise_month.R"))
here("analysis", "age_standardise_month.R")
